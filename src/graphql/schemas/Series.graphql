type Series {
    id: ID!
    name: String!
    tournaments: [Tournament]
    admin: User!
    seriesCreated: String!
    seriesEnded: String
}

input SeriesInput {
    id: ID
    name: String!
    tournaments: [ID!]
    admin: ID!
    seriesCreated: String!
    seriesEnded: String
}

type TournamentToSeriesResponse {
    success: Boolean!
    message: String
}

input UpdateSeriesInput {
    id: ID!
    name: String
    tournaments: [ID]
    admin: ID
    seriesCreated: String
    seriesEnded: String
}

# Series Response
type CreateSeriesResponse {
  success: Boolean!
  series: Series
  message: String
  id: ID!
}

type Mutation {
    # Series Mutations
    createSeries(input: SeriesInput!): CreateSeriesResponse!
    updateSeries(input: UpdateSeriesInput!): Series
    deleteSeries(id: ID!): Boolean
    addTournamentToSeries(seriesId: ID!, tournamentId: ID!): TournamentToSeriesResponse!
    deleteTournamentFromSeries(seriesId: ID!, tournamentId: ID!): TournamentToSeriesResponse!
    updateSeriesName(seriesId: ID!, name: String!): TournamentToSeriesResponse!
}

type Query {
    # Series Queries
    series(id: ID!): Series
    allSeries(limit: Int, offset: Int): [Series]
    allSeriesByAdmin(adminId: ID): [Series]
    tournamentsBySeries(seriesId: ID!): [Tournament]
}