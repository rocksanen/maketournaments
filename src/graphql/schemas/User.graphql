type Notification {
  sender: String!
  message: String!
  date: String!
}

type User {
  id: ID!
  name: String!
  email: String!
  password: String!
  tournaments: [Tournament]
  friends: [User]
  invitations: [String]
  userCreated: String!
  notifications: [Notification]
}

input CreateUserInput {
  name: String!
  email: String!
  password: String!
}

input UpdateUserInput {
  id: ID!
  name: String
  email: String
  password: String
}

input UserInput {
  id: ID
  name: String
  email: String
  password: String
}

type Mutation {
  sendInvitation(tournamentId: ID!, email: String!): SendInvitationResponse!
}

type SendInvitationResponse {
  success: Boolean!
  message: String
}

type Mutation {
  sendNotification(email: String!, sender: String!, message: String!): SendNotificationResponse!
}

type SendNotificationResponse {
  success: Boolean!
  message: String
}



